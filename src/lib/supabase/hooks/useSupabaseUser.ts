import { useState, useEffect, useCallback, useRef } from 'react';
import { type InitData as TelegramInitDataType } from '@telegram-apps/sdk-react';
import { supabase } from '../client';
import { type SupabaseUser, type TelegramUserData } from '../types';
import { logger } from '../../logger';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ö—É–∫–∞
interface UseSupabaseUserReturn {
  supabaseUser: SupabaseUser | null;
  loading: boolean;
  error: Error | null;
  refetch: () => void; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
}

/**
 * –•—É–∫ –¥–ª—è "–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –≤ Supabase.
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç initData (–∏–ª–∏ initDataUnsafe) –æ—Ç Telegram SDK.
 * –í–∞–∂–Ω–æ: –ø–æ–ª—è –≤ initData.user –º–æ–≥—É—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è first_name, last_name, photo_url (—Å –Ω–∏–∂–Ω–∏–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º).
 * –ü–æ–ª–µ auth_date –≤ initData —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (Unix timestamp).
 */
export function useSupabaseUser(initDataRaw: TelegramInitDataType | undefined): UseSupabaseUserReturn {
  const [supabaseUser, setSupabaseUser] = useState<SupabaseUser | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<Error | null>(null);
  
  // Ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –µ—Å–ª–∏ processUser —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
  const wasProcessedRef = useRef<boolean>(false);

  // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData
  const telegramUserFromInitData = initDataRaw?.user;
  const authDateFromInitData = initDataRaw?.auth_date; // –≠—Ç–æ Unix timestamp (—á–∏—Å–ª–æ)
  const hashFromInitData = initDataRaw?.hash;

  // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤ useCallback –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const processUser = useCallback(async () => {
    logger.info('üöÄ processUser started', { 
      telegramId: telegramUserFromInitData?.id,
      authDate: authDateFromInitData,
      hasSupabase: !!supabase
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegramUserFromInitData || typeof telegramUserFromInitData.id === 'undefined' || typeof authDateFromInitData === 'undefined') {
      logger.warn('Missing required Telegram user data');
      setLoading(false);
      // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –ø–æ–ª–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Supabase –∫–ª–∏–µ–Ω—Ç–∞
    if (!supabase) {
      logger.error('Supabase client is not available');
      setError(new Error('Supabase client is not available'));
      setLoading(false);
      return;
    }

    setLoading(true);
    setError(null);

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ auth_date - —ç—Ç–æ —á–∏—Å–ª–æ
    const authDateAsNumber = typeof authDateFromInitData === 'number' 
      ? authDateFromInitData 
      : Math.floor(new Date(authDateFromInitData as any).getTime() / 1000);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—è —Å –Ω–∏–∂–Ω–∏–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º –∏–∑ telegramUserFromInitData, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å,
    // –∏–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º camelCase (—Ö–æ—Ç—è SDK –æ–±—ã—á–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç snake_case –≤ user –æ–±—ä–µ–∫—Ç–µ)
    const userData: TelegramUserData = {
      id: telegramUserFromInitData.id,
      // @ts-expect-error SDK —Ç–∏–ø—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º–∏ –¥–ª—è initDataUnsafe, –ø—Ä–æ–±—É–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
      first_name: telegramUserFromInitData.first_name || telegramUserFromInitData.firstName,
      // @ts-expect-error
      last_name: telegramUserFromInitData.last_name || telegramUserFromInitData.lastName,
      username: telegramUserFromInitData.username,
      // @ts-expect-error
      photo_url: telegramUserFromInitData.photo_url || telegramUserFromInitData.photoUrl,
      auth_date: authDateAsNumber, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
      hash: hashFromInitData || '',
    };

    logger.info('Processing user authentication', { telegramId: userData.id });

    try {
      let { data: existingUser, error: selectError } = await supabase
        .from('users')
        .select('*')
        .eq('telegram_id', userData.id)
        .single();

      if (selectError && selectError.code !== 'PGRST116') { // PGRST116 - "No rows found"
        throw selectError;
      }

      logger.info('üîç User lookup result', { 
        existingUser: !!existingUser,
        userId: existingUser?.id,
        selectError: selectError?.code
      });

      if (existingUser) {
        logger.info('Updating existing user', { telegramId: userData.id });
        const updates: Partial<SupabaseUser> = {
          last_login: new Date().toISOString(), // last_login —ç—Ç–æ timestamptz
          first_name: userData.first_name,
          last_name: userData.last_name,
          username: userData.username,
          photo_url: userData.photo_url,
          auth_date: authDateAsNumber, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        };

        const { data: updatedUser, error: updateError } = await supabase
          .from('users')
          .update(updates)
          .eq('telegram_id', userData.id)
          .select('*')
          .single();

        if (updateError) {
          throw updateError;
        }
        logger.info('User updated successfully');
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Supabase Auth
        // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è Telegram Web Apps
        /*
        if (!existingUser.auth_user_id) {
          logger.info('üîê Starting auth session creation', { 
            telegramId: telegramUserFromInitData.id,
            supabaseUserId: existingUser.id 
          });
          
          // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π email –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
          const userEmail = `telegram_${telegramUserFromInitData.id}@yoga.app`;
          const userPassword = `telegram_${telegramUserFromInitData.id}_${authDateAsNumber}`;
          
          logger.info('üîê Preparing auth credentials', { userEmail });
          
          try {
            // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
              email: userEmail,
              password: userPassword,
            });
            
            logger.info('üîê Sign in attempt completed', { 
              success: !!signInData.user,
              hasSession: !!signInData.session,
              error: signInError?.message,
              errorCode: signInError?.status
            });
            
            if (signInError && signInError.message.includes('Invalid login credentials')) {
              logger.info('üîê User not found, creating new auth user');
            
              // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
              const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
                email: userEmail,
                password: userPassword,
                options: {
                  data: {
                    telegram_id: telegramUserFromInitData.id,
                    user_id: existingUser.id,
                    first_name: telegramUserFromInitData.first_name
                  }
                }
              });
              
              logger.info('üîê Sign up attempt result', { 
                success: !!signUpData.user,
                error: signUpError?.message,
                userId: signUpData.user?.id,
                needsConfirmation: !!signUpData.user && !signUpData.session
              });
              
              if (signUpError) {
                logger.error('‚ùå Failed to create auth user:', signUpError);
              } else {
                logger.info('‚úÖ Auth user created successfully', { 
                  authUserId: signUpData.user?.id,
                  supabaseUserId: existingUser.id,
                  hasSession: !!signUpData.session
                });
              }
            } else if (signInError) {
              logger.error('‚ùå Failed to sign in auth user:', signInError);
            } else {
              logger.info('‚úÖ Auth user signed in successfully', { 
                authUserId: signInData.user?.id,
                supabaseUserId: existingUser.id,
                hasSession: !!signInData.session
              });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            const { data: currentSession } = await supabase.auth.getSession();
            logger.info('üîê Final session check', { 
              hasSession: !!currentSession.session,
              userId: currentSession.session?.user?.id,
              userMetadata: currentSession.session?.user?.user_metadata
            });
            
          } catch (authErr) {
            logger.error('‚ùå Auth session creation failed:', authErr);
          }
        }
        */
        
        setSupabaseUser(updatedUser);
      } else {
        logger.info('Creating new user', { telegramId: userData.id });
        const newUserPayload: Omit<SupabaseUser, 'id' | 'created_at' | 'updated_at' | 'last_login'> & { last_login?: string } = {
          telegram_id: userData.id,
          first_name: userData.first_name,
          last_name: userData.last_name,
          username: userData.username,
          photo_url: userData.photo_url,
          auth_date: authDateAsNumber, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
          hash: userData.hash,
          last_login: new Date().toISOString(), // last_login —ç—Ç–æ timestamptz
        };

        const { data: newUser, error: insertError } = await supabase
          .from('users')
          .insert(newUserPayload)
          .select('*')
          .single();

        if (insertError) {
          throw insertError;
        }
        logger.info('New user created successfully');
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Supabase Auth
        // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è Telegram Web Apps
        /*
        if (!newUser.auth_user_id) {
          logger.info('üîê Starting auth session creation', { 
            telegramId: telegramUserFromInitData.id,
            supabaseUserId: newUser.id 
          });
          
          // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π email –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
          const userEmail = `telegram_${telegramUserFromInitData.id}@yoga.app`;
          const userPassword = `telegram_${telegramUserFromInitData.id}_${authDateAsNumber}`;
          
          logger.info('üîê Preparing auth credentials', { userEmail });
          
          try {
            // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
              email: userEmail,
              password: userPassword,
            });
            
            logger.info('üîê Sign in attempt completed', { 
              success: !!signInData.user,
              hasSession: !!signInData.session,
              error: signInError?.message,
              errorCode: signInError?.status
            });
            
            if (signInError && signInError.message.includes('Invalid login credentials')) {
              logger.info('üîê User not found, creating new auth user');
            
              // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
              const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
                email: userEmail,
                password: userPassword,
                options: {
                  data: {
                    telegram_id: telegramUserFromInitData.id,
                    user_id: newUser.id,
                    first_name: telegramUserFromInitData.first_name
                  }
                }
              });
              
              logger.info('üîê Sign up attempt result', { 
                success: !!signUpData.user,
                error: signUpError?.message,
                userId: signUpData.user?.id,
                needsConfirmation: !!signUpData.user && !signUpData.session
              });
              
              if (signUpError) {
                logger.error('‚ùå Failed to create auth user:', signUpError);
              } else {
                logger.info('‚úÖ Auth user created successfully', { 
                  authUserId: signUpData.user?.id,
                  supabaseUserId: newUser.id,
                  hasSession: !!signUpData.session
                });
              }
            } else if (signInError) {
              logger.error('‚ùå Failed to sign in auth user:', signInError);
            } else {
              logger.info('‚úÖ Auth user signed in successfully', { 
                authUserId: signInData.user?.id,
                supabaseUserId: newUser.id,
                hasSession: !!signInData.session
              });
            }
          } catch (authErr) {
            logger.error('‚ùå Auth session creation failed:', authErr);
          }
        }
        */
        
        setSupabaseUser(newUser);
      }
      
      // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
      wasProcessedRef.current = true;
      
    } catch (err) {
      logger.error('Error processing user in Supabase:', err);
      setError(err instanceof Error ? err : new Error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
      setSupabaseUser(null);
    } finally {
      setLoading(false);
    }
  }, [telegramUserFromInitData, authDateFromInitData, hashFromInitData]);

  useEffect(() => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º processUser —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    if (
      !wasProcessedRef.current && 
      telegramUserFromInitData && 
      typeof telegramUserFromInitData.id !== 'undefined' && 
      typeof authDateFromInitData !== 'undefined'
    ) {
      logger.info('Starting user authentication process (one-time only)');
      processUser();
    } else {
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω—ã, –Ω–æ –∑–∞–≥—Ä—É–∑–∫–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –µ—ë
      if(loading) {
        logger.warn('Incomplete user data, stopping loading state');
        setLoading(false);
      }
    }
    // –í–∞–∂–Ω–æ: –Ω–µ –≤–∫–ª—é—á–∞–µ–º processUser –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
  }, [telegramUserFromInitData, authDateFromInitData, loading]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —è–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const refetch = useCallback(() => {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ processUser –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    if (telegramUserFromInitData && typeof telegramUserFromInitData.id !== 'undefined' && typeof authDateFromInitData !== 'undefined') {
      logger.info('Manually refetching user data');
      processUser();
    } else {
      logger.warn('Cannot refetch: incomplete user data');
    }
  }, [processUser, telegramUserFromInitData, authDateFromInitData]);

  return { supabaseUser, loading, error, refetch };
} 