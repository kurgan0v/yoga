import React, {useState, useEffect, useMemo} from 'react';
import { useNavigate } from 'react-router-dom';
import { Page } from '@/components/Page';
import { useContents, ContentItem } from '@/lib/supabase/hooks/useContents';
import { useFavorites } from '@/lib/supabase/hooks';
import { useSupabaseUser } from '@/lib/supabase/hooks';
import './LibraryPage.css';
import {
  initDataState as _initDataState,
  useSignal,
} from '@telegram-apps/sdk-react';
import {Link} from "@/components";
// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
const mainCategories = [
  { id: 'physical', name: '–¢–µ–ª–æ', img: '/cat1.png', icon: 'üßò‚Äç‚ôÄÔ∏è', description: '–ê—Å–∞–Ω—ã –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏' },
  { id: 'meditation', name: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è', img: '/cat2.png', icon: 'üß†', description: '–ü—Ä–∞–∫—Ç–∏–∫–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏' },
  { id: 'base', name: '–ë–∞–∑–∞', icon: '‚≠ê', img: '/cat3.png', description: '–û—Å–Ω–æ–≤—ã –∏ –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏' },
  { id: 'breathing', name: '–î—ã—Ö–∞–Ω–∏–µ', img: '/cat1.png', icon: 'üå¨Ô∏è', description: '–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏' }
];

// –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∫–ª—é—á–∞—è —Ñ–∏–ª—å—Ç—Ä—ã
const allCategories = [
  { id: 'all', name: '–í—Å–µ' },
  ...mainCategories
];

const LibraryPage: React.FC = () => {
  const navigate = useNavigate();
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null); // null = –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  const [timeFilter, setTimeFilter] = useState<string | null>(null);
  const [showTimeFilter, setShowTimeFilter] = useState(false);
  const [contentVisible, setContentVisible] = useState(false);
  const [currentSlide, setCurrentSlide] = useState(0);

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { supabaseUser } = useSupabaseUser(undefined);
  const userId = supabaseUser?.id || null;

  // –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  const { isFavorite, addToFavorites, removeFromFavorites } = useFavorites(userId);

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  const { contents, loading, error } = useContents(selectedCategory !== null ? {
    categorySlug: selectedCategory && selectedCategory !== 'all' ? selectedCategory : undefined,
    duration: timeFilter ? getDurationRange(timeFilter) : undefined
  } : {});

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞ "–ù–æ–≤–æ–µ" (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
  const shouldLoadLatest = selectedCategory === null;
  const { contents: latestContents, loading: latestLoading } = useContents(shouldLoadLatest ? {} : { search: 'NEVER_MATCH_ANYTHING_XYZ' }); // Hack: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –∫–æ—Ç–æ—Ä—ã–π –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ—Ç –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  useEffect(() => {
    const timer = setTimeout(() => {
      setContentVisible(true);
    }, 100);
    return () => clearTimeout(timer);
  }, []);

  // –ê–≤—Ç–æ–ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
  useEffect(() => {
    if (selectedCategory === null && latestContents.length > 1) {
      const interval = setInterval(() => {
        setCurrentSlide(prev => (prev + 1) % Math.min(latestContents.length, 3));
      }, 5000); // –°–º–µ–Ω–∞ —Å–ª–∞–π–¥–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
      
      return () => clearInterval(interval);
    }
  }, [selectedCategory, latestContents.length]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥—è –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
  function getDurationRange(timeFilter: string): { min: number, max: number } | undefined {
    switch (timeFilter) {
      case 'under7': return { min: 0, max: 7 * 60 };
      case '7-20': return { min: 7 * 60, max: 20 * 60 };
      case '20-40': return { min: 20 * 60, max: 40 * 60 };
      case '40-60': return { min: 40 * 60, max: 60 * 60 };
      default: return undefined;
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–µ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
  function getTimeFilterLabel(timeFilter: string): string {
    switch (timeFilter) {
      case 'under7': return '–¥–æ 7 –º–∏–Ω';
      case '7-20': return '7-20 –º–∏–Ω';
      case '20-40': return '20-40 –º–∏–Ω';
      case '40-60': return '40-60 –º–∏–Ω';
      default: return '–í—Ä–µ–º—è';
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–∞–∫—Ç–∏–∫)
  const handleMainCategorySelect = (categoryId: string) => {
    setSelectedCategory(categoryId);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
  const handleSubCategorySelect = (categoryId: string) => {
    setSelectedCategory(categoryId);
  };

  // –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
  const handleBackToMain = () => {
    setSelectedCategory(null);
    setTimeFilter(null);
    setShowTimeFilter(false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ
  const handlePracticeSelect = (practice: ContentItem) => {
    navigate(`/practice/${practice.id}`);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const handleToggleFavorite = (e: React.MouseEvent, practiceId: string) => {
    e.stopPropagation();
    if (!userId) return;
    
    if (isFavorite(practiceId)) {
      removeFromFavorites(practiceId);
    } else {
      addToFavorites(practiceId);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É
  // const handleFavoritesClick = () => {
  //   navigate('/library/favorites');
  // };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const toggleTimeFilter = () => {
    setShowTimeFilter(!showTimeFilter);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const handleTimeFilterSelect = (filter: string) => {
    setTimeFilter(filter);
    setShowTimeFilter(false);
  };
  // –ü–æ–ª—É—á–∞–µ–º initData –∏–∑ Telegram SDK
  const initDataState = useSignal(_initDataState);

  const user = useMemo(() =>
          initDataState && initDataState.user ? initDataState.user : undefined,
      [initDataState]);
  // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  if (selectedCategory === null) {
    return (
        <Page back={false}>
          {user && <div className="!py-2 !px-4 flex justify-between items-center border-b border-black">
            <Link to={'/'} >
              {user.photo_url ? (
                  <img className={'w-6 h-6 rounded-full border border-black'} src={user.photo_url}
                       alt={user.username || user.first_name} loading="lazy"/>
              ) : (
                  <div className="w-6 h-6 rounded-full !bg-gray-200 flex items-center justify-center"
                       aria-hidden="true">
                    {user.first_name.charAt(0)}
                  </div>
              )}
            </Link>

            <img src={'/logo.svg'} alt={''}/>
            <img src={'/settings.svg'} alt={''}/>


          </div>}
          <div>


            {/* –°–ª–∞–π–¥–µ—Ä "–ù–æ–≤–æ–µ" */}
            <div>

              {latestLoading ? (
                  <div className="latest-loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
              ) : latestContents.length > 0 ? (
                  <div className="latest-slider-container">
                    <div className="flex flex-col h-[260px] bg-cover" style={{backgroundImage: `url(${latestContents[currentSlide]?.thumbnail_url || '/img/practice-default.jpg'})`}}
                         onClick={() => handlePracticeSelect(latestContents[currentSlide])}>
                      <div
                          className="latest-card-image"

                      >
                      </div>
                      <div className="latest-card-content">
                        <div className="flex items-center gap-2">
                          <p className={'py-1 !px-2 bg-[#414141] text-white'}>{Math.floor(latestContents[currentSlide]?.duration / 60)} –º–∏–Ω</p>
                          <p className={'py-1 !px-2 bg-[#414141] text-white'}>{latestContents[currentSlide]?.categories?.name || '–ü—Ä–∞–∫—Ç–∏–∫–∞'}</p>
                        </div>
                        <h3 className="text-white font-bold text-2xl !mb-2">{latestContents[currentSlide]?.title}</h3>

                      </div>
                    </div>

                    {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–æ—á–∫–∞–º–∏ */}
                    {latestContents.slice(0, 3).length > 1 && (
                        <div className="slider-dots absolute bottom-2 left-1/2 -translate-x-1/2">
                          {latestContents.slice(0, 3).map((_, index) => (
                              <button
                                  key={index}
                                  className={`slider-dot ${index === currentSlide ? 'active' : ''}`}
                                  onClick={() => setCurrentSlide(index)}
                              />
                          ))}
                        </div>
                    )}
                  </div>
              ) : null}
            </div>

            {/* –ì–ª–∞–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
            <div>
              {mainCategories.map(category => (
                  <div className={'!p-4 border-b border-black'} key={category.id}>
                    <div className={'flex flex-col gap-4'} onClick={() => handleMainCategorySelect(category.id)}>

                      <div className={'flex items-center justify-between gap-2'}>
                        <h3 className="font-bold text-2xl">{category.name}</h3>
                        <p className={'text-[#D8D8D8] underline'}>–≤—Å–µ –ø—Ä–∞–∫—Ç–∏–∫–∏</p>
                      </div>
                      <p className="category-description">{category.description}</p>
                      <img src={category.img} className={''}/>
                    </div>
                  </div>
              ))}
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ */}
            {/*<button className="favorites-main-button" onClick={handleFavoritesClick}>
              ‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
            </button>*/}
          </div>
        </Page>
    );
  }

  // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏
  return (
      <Page back={true} onBackClick={handleBackToMain}>
        <div className={`library-container ${contentVisible ? 'content-visible' : ''}`}>
          <div className="library-header">
            <h1 className="library-title">
              {allCategories.find(cat => cat.id === selectedCategory)?.name || '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'}
            </h1>
            <div className="time-filter-toggle" onClick={toggleTimeFilter}>
              {timeFilter ? getTimeFilterLabel(timeFilter) : '–í—Ä–µ–º—è'} {showTimeFilter ? '‚ñ≤' : '‚ñº'}
            </div>
          </div>

          {/* –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ */}
          {showTimeFilter && (
              <div className="time-filter-dropdown">
            <button 
              onClick={() => handleTimeFilterSelect('under7')}
              className={timeFilter === 'under7' ? 'active' : ''}
            >
              –¥–æ 7 –º–∏–Ω—É—Ç
            </button>
            <button 
              onClick={() => handleTimeFilterSelect('7-20')}
              className={timeFilter === '7-20' ? 'active' : ''}
            >
              7-20 –º–∏–Ω—É—Ç
            </button>
            <button 
              onClick={() => handleTimeFilterSelect('20-40')}
              className={timeFilter === '20-40' ? 'active' : ''}
            >
              20-40 –º–∏–Ω—É—Ç
            </button>
            <button 
              onClick={() => handleTimeFilterSelect('40-60')}
              className={timeFilter === '40-60' ? 'active' : ''}
            >
              40-60 –º–∏–Ω—É—Ç
            </button>
            {timeFilter && (
              <button onClick={() => setTimeFilter(null)}>–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä</button>
            )}
          </div>
        )}
        
        {/* –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <div className="category-tabs">
          {allCategories.map(cat => (
            <button
              key={cat.id}
              className={`category-tab ${selectedCategory === cat.id ? 'active' : ''}`}
              onClick={() => handleSubCategorySelect(cat.id)}
            >
              {cat.name}
            </button>
          ))}
        </div>
        
        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ */}
        <div className="library-content">
          {loading ? (
            <div className="library-loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
          ) : error ? (
            <div className="library-error">–û—à–∏–±–∫–∞: {error}</div>
          ) : contents.length === 0 ? (
            <div className="library-empty">
              {timeFilter 
                ? '–ù–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º' 
                : '–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫'}
            </div>
          ) : (
            <div className="practice-grid">
              {contents.map((item: ContentItem) => (
                <div 
                  key={item.id} 
                  className="practice-square-card"
                  onClick={() => handlePracticeSelect(item)}
                >
                  <div 
                    className="practice-square-thumbnail" 
                    style={{ backgroundImage: `url(${item.thumbnail_url || '/img/practice-default.jpg'})` }}
                  >
                    <button 
                      className={`square-favorite-button ${isFavorite(item.id) ? 'active' : ''}`}
                      onClick={(e) => handleToggleFavorite(e, item.id)}
                    >
                      {isFavorite(item.id) ? '‚ù§Ô∏è' : 'ü§ç'}
                    </button>
                    <div className="practice-duration-badge">
                      {Math.floor(item.duration / 60)} –º–∏–Ω
                    </div>
                  </div>
                  <div className="practice-square-info">
                    <h3 className="practice-square-title">{item.title}</h3>
                    <div className="practice-difficulty-stars">
                      {'‚≠ê'.repeat(Number(item.difficulty) || 2)}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </Page>
  );
};

export default LibraryPage; 