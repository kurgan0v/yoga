import { useMemo, FC, useEffect, useState } from 'react';
import {
  initDataState as _initDataState,
  useSignal,
} from '@telegram-apps/sdk-react';
import { useNavigate } from 'react-router-dom';

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —Ö—É–∫–∏
import { Page } from '@/components/Page';
import Stats from '@/components/Stats';
import { useSupabaseUser } from '@/lib/supabase/hooks/useSupabaseUser';
import { logger } from '@/lib/logger';

// –°—Ç–∏–ª–∏
import './MainScreen.css';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—à–∏–±–∫–∏
const ErrorState: FC<{ message: string }> = ({ message }) => (
  <div className="error-container">
    <div className="error-icon" aria-hidden="true">‚ö†Ô∏è</div>
    <h2 className="error-title">–û—à–∏–±–∫–∞</h2>
    <p className="error-message">{message}</p>
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
const BrowserWarning: FC = () => (
  <div className="browser-warning">
    <div className="browser-warning-icon" aria-hidden="true">üì±</div>
    <h2 className="browser-warning-title">–¢–æ–ª—å–∫–æ –¥–ª—è Telegram</h2>
    <p className="browser-warning-message">
      –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Telegram Mini Apps.
      –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ Telegram.
    </p>
  </div>
);

export const MainScreen: FC = () => {
  const navigate = useNavigate();
  const [, setContentVisible] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram Mini App
  const isInTelegramApp = useMemo(() => {
    if (typeof window === 'undefined') return false;
    return !!(window as any).Telegram?.WebApp;
  }, []);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  const allowBrowserAccess = useMemo(() => {
    return import.meta.env.VITE_ALLOW_BROWSER_ACCESS === 'true';
  }, []);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const showAppContent = useMemo(() => {
    return isInTelegramApp || allowBrowserAccess;
  }, [isInTelegramApp, allowBrowserAccess]);

  // –ü–æ–ª—É—á–∞–µ–º initData –∏–∑ Telegram SDK
  const initDataState = useSignal(_initDataState);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase
  const { loading, error } = useSupabaseUser(initDataState);

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ initData
  const user = useMemo(() => 
    initDataState && initDataState.user ? initDataState.user : undefined,
  [initDataState]);

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  useEffect(() => {
    if (!loading && user) {
      const timer = setTimeout(() => {
        setContentVisible(true);
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [loading, user]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∞–∫—Ç–∏–∫–∏
  const handleSelectPractice = () => {
    navigate('/quiz');
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å
  const handleProfileClick = () => {
    navigate('/profile');
  };

  // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ Telegram App –∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  if (!showAppContent) {
    logger.warn('Access denied: not in Telegram app and browser access not allowed');
    return (
      <Page back={false}>
        <div className="main-screen">
          <BrowserWarning />
        </div>
      </Page>
    );
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  if (error) {
    return (
      <Page back={false}>
        <div className="main-screen">
          <ErrorState message={error.message} />
        </div>
      </Page>
    );
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!user) {
    return (
      <Page back={false}>
        <div className="main-screen">
          <ErrorState message="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram" />
        </div>
      </Page>
    );
  }

  return (
    <Page back={false}>
      <div className={`overflow-x-hidden`}>
        {/* Top Bar —Å –∞–≤–∞—Ç–∞—Ä–æ–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ */}
        <div className="!py-2 !px-4 flex justify-between items-center border-b border-black">
          <div onClick={handleProfileClick}>
            {user.photo_url ? (
                <img className={'w-6 h-6 rounded-full border border-black'} src={user.photo_url}
                     alt={user.username || user.first_name} loading="lazy"/>
            ) : (
                <div className="w-6 h-6 rounded-full !bg-gray-200 flex items-center justify-center" aria-hidden="true">
                  {user.first_name.charAt(0)}
                </div>
            )}
          </div>

          <img src={'/logo.svg'} alt={''}/>
          <img src={'/settings.svg'} alt={''}/>


        </div>

        {/* –ë–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∫–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏ */}
        <Stats
          strength={3}
          practiceMinutes={100}
          daysInFlow={2}
          onSelectPractice={handleSelectPractice}
        />
      </div>
    </Page>
  );
}; 