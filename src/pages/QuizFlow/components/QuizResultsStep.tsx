import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useQuiz } from '../../../contexts/QuizContext';
import { supabase } from '../../../lib/supabase/client';
import { Button } from '../../../ui/components/Button/Button';
import VideoPlayer from "@/components/Player/VideoPlayer.tsx";
import TimerPlayer from "@/components/Player/TimerPlayer.tsx";

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ Supabase
interface ContentData {
  id: string;
  title: string;
  description: string | null;
  thumbnail_url: string | null;
  duration: number | null;
  content_type: { 
    name: string; 
    slug: string; 
  } | null;
}

interface QuizLogicItem {
  id: string;
  priority: number | null;
  content_id: string;
  contents: ContentData;
}

// üéØ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
const MeditationTimerSetup: React.FC<{
  meditationObject: string;
  onStartMeditation: (duration: number, audioUrl?: string) => void;
}> = ({ meditationObject, onStartMeditation }) => {
  const [selectedMinutes, setSelectedMinutes] = useState(8);
  const [selectedSeconds, setSelectedSeconds] = useState(0);
  const [audioUrl, setAudioUrl] = useState<string | undefined>();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∞—É–¥–∏–æ –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏
  useEffect(() => {
    const loadMeditationAudio = async () => {
      if (!meditationObject || !supabase) return;
      
      console.log('üéµ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞—É–¥–∏–æ –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏...');
      console.log('üìù –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏:', meditationObject);
      
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ "meditation"
        console.log('üîç –ò—â–µ–º content_type –¥–ª—è meditation...');
        
        // üîç –û–¢–õ–ê–î–ö–ê: –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º –≤—Å–µ content_types –≤ –±–∞–∑–µ
        const { data: allContentTypes, error: allTypesError } = await supabase
          .from('content_types')
          .select('*');
        
        console.log('üìã –í—Å–µ content_types –≤ –±–∞–∑–µ:', { allContentTypes, allTypesError });
        
        // üîç –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ content_type
        if (allContentTypes && allContentTypes.length > 0) {
          console.log('üìù –î–µ—Ç–∞–ª–∏ content_types:');
          allContentTypes.forEach((type, index) => {
            console.log(`${index + 1}. ID: ${type.id}, Name: "${type.name}", Slug: "${type.slug}"`);
          });
        }
        
        const { data: contentTypeData, error: contentTypeError } = await supabase
          .from('content_types')
          .select('id, name, slug')
          .eq('slug', 'meditation')
          .single();

        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ content_type:', { contentTypeData, contentTypeError });

        if (contentTypeError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ content_type:', contentTypeError);
          
          // üîÑ FALLBACK: –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–Ω—Ç
          console.log('üîÑ –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–Ω—Ç...');
          
          const audioSlugs = ['audio', 'music', 'sound', 'background'];
          let foundAudioType = null;
          
          for (const slug of audioSlugs) {
            const { data: fallbackType, error: fallbackError } = await supabase
              .from('content_types')
              .select('id, name, slug')
              .eq('slug', slug)
              .single();
              
            if (!fallbackError && fallbackType) {
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω fallback —Ç–∏–ø: ${slug}`, fallbackType);
              foundAudioType = fallbackType;
              break;
            }
          }
          
          if (foundAudioType) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–∏–ø –≤–º–µ—Å—Ç–æ meditation
            console.log('üéµ –ò—â–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã —Å fallback —Ç–∏–ø–æ–º...');
            const { data: audioData, error: audioError } = await supabase
              .from('contents')
              .select('id, title, audio_file_path, duration')
              .eq('content_type_id', foundAudioType.id)
              .not('audio_file_path', 'is', null)
              .limit(5);

            if (!audioError && audioData && audioData.length > 0) {
              console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ fallback:', audioData.length);
              const selectedAudio = audioData[0];
              if (selectedAudio?.audio_file_path) {
                console.log('‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback audioUrl:', selectedAudio.audio_file_path);
                setAudioUrl(selectedAudio.audio_file_path);
                return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –∞—É–¥–∏–æ –Ω–∞–π–¥–µ–Ω–æ
              }
            }
          }
          
          return;
        }

        if (!contentTypeData) {
          console.warn('‚ö†Ô∏è Content type "meditation" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
          return;
        }

        console.log('‚úÖ Content type –Ω–∞–π–¥–µ–Ω:', contentTypeData);

        // –¢–µ–ø–µ—Ä—å –∏—â–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏
        console.log('üîç –ò—â–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏...');
        const { data: audioData, error: audioError } = await supabase
          .from('contents')
          .select('id, title, audio_file_path, duration')
          .eq('content_type_id', contentTypeData.id)
          .not('audio_file_path', 'is', null)
          .limit(5); // –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤:', { audioData, audioError });

        if (audioError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤:', audioError);
          return;
        }

        if (!audioData || audioData.length === 0) {
          console.warn('‚ö†Ô∏è –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
          console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–±–ª–∏—Ü—É contents - –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ —Å content_type_id =', contentTypeData.id);
          return;
        }

        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤:', audioData.length);
        console.log('üéµ –°–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤:', audioData);

        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
        const selectedAudio = audioData[0];
        console.log('üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª:', selectedAudio);
        
        if (selectedAudio?.audio_file_path) {
          console.log('‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º audioUrl:', selectedAudio.audio_file_path);
          setAudioUrl(selectedAudio.audio_file_path);
        } else {
          console.warn('‚ö†Ô∏è –£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –Ω–µ—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É');
        }
        
      } catch (error) {
        console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ:', error);
      }
    };

    loadMeditationAudio();
  }, [meditationObject]);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
  const minuteOptions = Array.from({ length: 15 }, (_, i) => i + 1); // 1-15 –º–∏–Ω—É—Ç
  const secondOptions = Array.from({ length: 60 }, (_, i) => i); // 0-59 —Å–µ–∫—É–Ω–¥

  const handleStart = () => {
    const totalSeconds = selectedMinutes * 60 + selectedSeconds;
    onStartMeditation(totalSeconds, audioUrl);
  };

  return (
    <div className="meditation-timer-setup">
      <div className="quiz-title" style={{ margin: '40px 20px 20px' }}>
        –≤—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏
      </div>
      
      <div className="time-picker-container">
        <div className="time-selector">
          <div className="time-column">
            <div className="time-options">
              {minuteOptions.map(minute => (
                <button
                  key={minute}
                  className={`time-option ${selectedMinutes === minute ? 'selected' : ''}`}
                  onClick={() => setSelectedMinutes(minute)}
                >
                  {minute.toString().padStart(2, '0')}
                </button>
              ))}
            </div>
            <div className="time-label">–º–∏–Ω</div>
          </div>
          
          <div className="time-column">
            <div className="time-options">
              {secondOptions.map(second => (
                <button
                  key={second}
                  className={`time-option ${selectedSeconds === second ? 'selected' : ''}`}
                  onClick={() => setSelectedSeconds(second)}
                >
                  {second.toString().padStart(2, '0')}
                </button>
              ))}
            </div>
            <div className="time-label">—Å–µ–∫</div>
          </div>
        </div>
      </div>
      
      <div className="meditation-start-container">
        <button className="meditation-start-btn" onClick={handleStart}>
          –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é
        </button>
      </div>
    </div>
  );
};

const QuizResultsStep: React.FC = () => {
  const { state } = useQuiz();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [recommendation, setRecommendation] = useState<ContentData | null>(null);
  const [error, setError] = useState<string | null>(null);
  
  // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã–Ω–æ—Å–∏–º –≤—Å–µ —Ö—É–∫–∏ –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
  const [showTimer, setShowTimer] = useState(false);
  const [meditationDuration, setMeditationDuration] = useState(0);
  const [meditationAudioUrl, setMeditationAudioUrl] = useState<string | undefined>();

  useEffect(() => {
    const findRecommendation = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // –î–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã—Ö –º–µ–¥–∏—Ç–∞—Ü–∏–π –Ω–µ –∏—â–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–µ—Ä
        if (state.practiceType === 'meditation' && state.approach === 'self') {
          setLoading(false);
          return;
        }
        
        if (!supabase || !state.practiceType) {
          throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
        }

        // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        let query = supabase
          .from('quiz_logic')
          .select(`
            id,
            priority,
            content_id,
            contents:content_id (
              id,
              title,
              description,
              thumbnail_url,
              duration,
              content_type:content_types (
                name,
                slug
              )
            )
          `)
          .eq('practice_type', state.practiceType)
          .order('priority', { ascending: false });

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (state.duration) {
          query = query
            .gte('duration_max', state.duration.min)
            .lte('duration_min', state.duration.max);
        }

        if (state.goal) {
          query = query.eq('goal', state.goal);
        }

        if (state.approach) {
          query = query.eq('approach', state.approach);
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const { data, error } = await query.limit(10);

        if (error) throw error;

        if (!data || data.length === 0) {
          // –ï—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –º–µ–Ω–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ
          const { data: fallbackData, error: fallbackError } = await supabase
            .from('quiz_logic')
            .select(`
              id,
              priority,
              content_id,
              contents:content_id (
                id,
                title,
                description,
                thumbnail_url,
                duration,
                content_type:content_types (
                  name,
                  slug
                )
              )
            `)
            .eq('practice_type', state.practiceType)
            .order('priority', { ascending: false })
            .limit(5);
            
          if (fallbackError) throw fallbackError;
          
          if (!fallbackData || fallbackData.length === 0) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –≤–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
          }
          
          // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö
          const randomIndex = Math.floor(Math.random() * fallbackData.length);
          const selectedItem = fallbackData[randomIndex] as any;
          setRecommendation(selectedItem.contents);
        } else {
          // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Ç–æ–ø-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          const byPriority: Record<number, QuizLogicItem[]> = {};
          
          data.forEach((item: any) => {
            const priority = item.priority || 0;
            if (!byPriority[priority]) {
              byPriority[priority] = [];
            }
            byPriority[priority].push(item);
          });
          
          // –ë–µ—Ä–µ–º –≥—Ä—É–ø–ø—É —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
          const highestPriority = Math.max(...Object.keys(byPriority).map(Number));
          const topPriorityItems = byPriority[highestPriority];
          
          // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Ç–æ–ø-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö
          const randomIndex = Math.floor(Math.random() * topPriorityItems.length);
          const selectedItem = topPriorityItems[randomIndex] as any;
          setRecommendation(selectedItem.contents);
        }
      } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', error);
        setError(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
      } finally {
        setLoading(false);
      }
    };

    findRecommendation();
  }, [state.practiceType, state.duration, state.goal, state.approach]);

  // const handleStartPractice = () => {
  //   // –î–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã—Ö –º–µ–¥–∏—Ç–∞—Ü–∏–π –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —Ç–∞–π–º–µ—Ä –±–µ–∑ –ø–æ–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  //   if (state.practiceType === 'meditation' && state.approach === 'self' && state.selfMeditationSettings) {
  //     const { object, duration } = state.selfMeditationSettings;
  //     navigate(`/practice/timer`, {
  //       state: {
  //         duration,
  //         object,
  //         fromQuiz: true,
  //         practiceType: 'meditation'
  //       }
  //     });
  //     return;
  //   }
  //
  //   // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫ (–≤–∏–¥–µ–æ, –∞—É–¥–∏–æ) –ø–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ ID –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  //   if (recommendation) {
  //     navigate(`/practice/${recommendation.id}`);
  //   }
  // };

  const handleRetakeQuiz = () => {
    navigate('/quiz');
  };

  const handleOtherPractice = () => {
    navigate('/');
  };

  if (loading) {
    return (
      <div className="quiz-loading">
        <div className="quiz-loading-spinner"></div>
        <p>–ü–æ–¥–±–∏—Ä–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –¥–ª—è –≤–∞—Å...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="quiz-error">
        <h3>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h3>
        <p>{error}</p>
        <Button onClick={handleRetakeQuiz} fullWidth>
          –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        </Button>
      </div>
    );
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã—Ö –º–µ–¥–∏—Ç–∞—Ü–∏–π
  if (state.practiceType === 'meditation' && state.approach === 'self' && state.selfMeditationSettings) {
    const handleStartMeditation = (duration: number, audioUrl?: string) => {
      setMeditationDuration(duration);
      setMeditationAudioUrl(audioUrl);
      setShowTimer(true);
    };

    if (showTimer) {
      return (
        <div className="meditation-timer-container">
          <TimerPlayer
            duration={meditationDuration}
            title="–ú–µ–¥–∏—Ç–∞—Ü–∏—è"
            meditationObject={state.selfMeditationSettings.object}
            audioUrl={meditationAudioUrl}
            autoStart={true}
          />
        </div>
      );
    }

    return (
      <MeditationTimerSetup
        meditationObject={state.selfMeditationSettings.object}
        onStartMeditation={handleStartMeditation}
      />
    );
  }

  return (
    <div className="quiz-step-content">
      {recommendation && (
        <div className="quiz-recommendation">
          {recommendation.thumbnail_url && (
              <VideoPlayer />

          )}
          
          <div className="recommendation-details">
            <div className={'flex items-center gap-2 justify-between'}>
              <h3 className="recommendation-title">{recommendation.title}</h3>
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M6 7.2002V16.6854C6 18.0464 6 18.7268 6.20412 19.1433C6.58245 19.9151 7.41157 20.3588 8.26367 20.2454C8.7234 20.1842 9.28964 19.8067 10.4221 19.0518L10.4248 19.0499C10.8737 18.7507 11.0981 18.6011 11.333 18.5181C11.7642 18.3656 12.2348 18.3656 12.666 18.5181C12.9013 18.6012 13.1266 18.7515 13.5773 19.0519C14.7098 19.8069 15.2767 20.1841 15.7364 20.2452C16.5885 20.3586 17.4176 19.9151 17.7959 19.1433C18 18.7269 18 18.0462 18 16.6854V7.19691C18 6.07899 18 5.5192 17.7822 5.0918C17.5905 4.71547 17.2837 4.40973 16.9074 4.21799C16.4796 4 15.9203 4 14.8002 4H9.2002C8.08009 4 7.51962 4 7.0918 4.21799C6.71547 4.40973 6.40973 4.71547 6.21799 5.0918C6 5.51962 6 6.08009 6 7.2002Z"
                    stroke="#191919" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>

            </div>
            <div className="recommendation-meta">
              <span  className="recommendation-type">
                {recommendation.content_type?.name || '–ü—Ä–∞–∫—Ç–∏–∫–∞'}
              </span>
              {recommendation.duration && (
                  <span className="recommendation-duration">
                  {Math.floor(recommendation.duration / 60)} –º–∏–Ω
                </span>
              )}
            </div>
            {recommendation.description && (
                <p className="recommendation-description">{recommendation.description}</p>
            )}
          </div>

          <div className="recommendation-actions">
            {/*<Button onClick={handleStartPractice} fullWidth>
              –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É
            </Button>*/}
            <Button className={'!rounded-none'} onClick={handleOtherPractice} fullWidth>
              –¥—Ä—É–≥–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
            </Button>
            <p  className={'!rounded-none font-bold underline underline-offset-4 text-center'} onClick={handleRetakeQuiz}>
              –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            </p>
          </div>
        </div>
      )}
    </div>
  );
};

export default QuizResultsStep; 