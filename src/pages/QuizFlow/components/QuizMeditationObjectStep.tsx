import React from 'react';
import { useQuiz } from '../../../contexts/QuizContext';
import { useQuizStepsRealtime } from '../../../contexts/QuizContext';

const QuizMeditationObjectStep: React.FC = () => {
  const { state, setSelfMeditationSettings, setStep } = useQuiz();
  const { steps, loading } = useQuizStepsRealtime();

  // –ù–∞—Ö–æ–¥–∏–º —à–∞–≥ —Å type === 'meditation_object'
  const objectStep = steps.find((step) => step.type === 'meditation_object');
  const options = objectStep?.answers || [];

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏
  const handleSelectObject = (value: string) => {
    setSelfMeditationSettings({
      duration: state.selfMeditationSettings?.duration || 600, // 10 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      object: value as any
    });
    
    // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º (—Ç–∞–π–º–µ—Ä), –º–∏–Ω—É—è –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    setTimeout(() => {
      setStep(4); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤–º–µ—Å—Ç–æ —à–∞–≥–∞ 3 (–≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏)
    }, 0);
  };

  if (loading) {
    return (
      <div className="quiz-loading">
        <div className="quiz-loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –º–µ–¥–∏—Ç–∞—Ü–∏–∏...</p>
      </div>
    );
  }

  if (options.length === 0) {
    return (
      <div className="quiz-error">
        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
        <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –º–µ–¥–∏—Ç–∞—Ü–∏–∏</p>
        <div style={{ marginTop: '10px', fontSize: '12px', color: '#666' }}>
          <p>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</p>
          <p>–í—Å–µ–≥–æ —à–∞–≥–æ–≤: {steps.length}</p>
          <p>–®–∞–≥ meditation_object –Ω–∞–π–¥–µ–Ω: {objectStep ? '–î–∞' : '–ù–µ—Ç'}</p>
          {objectStep && <p>–í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤: {objectStep.answers.length}</p>}
        </div>
      </div>
    );
  }

  return (
    <div className="quiz-step-content">
      <div className="quiz-options-list">
        {options
          .sort((a, b) => (a.order || 0) - (b.order || 0))
          .map((option) => {
            const selected = state.selfMeditationSettings?.object === option.value;
            
            return (
              <button
                key={option.id}
                className={`quiz-option ${selected ? 'selected' : ''}`}
                onClick={() => handleSelectObject(option.value)}
              >
                {option.label}
              </button>
            );
          })
        }
      </div>
    </div>
  );
};

export default QuizMeditationObjectStep; 